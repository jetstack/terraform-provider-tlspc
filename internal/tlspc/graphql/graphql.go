// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// Indicates the type of a Cloud Provider
type CloudProviderType string

const (
	// AWS cloud provider type
	CloudProviderTypeAws CloudProviderType = "AWS"
	// Azure cloud provider type
	CloudProviderTypeAzure CloudProviderType = "AZURE"
	// Google cloud provider type
	CloudProviderTypeGcp CloudProviderType = "GCP"
)

var AllCloudProviderType = []CloudProviderType{
	CloudProviderTypeAws,
	CloudProviderTypeAzure,
	CloudProviderTypeGcp,
}

// DeleteGCPProviderResponse is returned by DeleteGCPProvider on success.
type DeleteGCPProviderResponse struct {
	// Deletes a list of Cloud Providers by ID
	DeleteCloudProvider bool `json:"deleteCloudProvider"`
}

// GetDeleteCloudProvider returns DeleteGCPProviderResponse.DeleteCloudProvider, and is useful for accessing the field via an interface.
func (v *DeleteGCPProviderResponse) GetDeleteCloudProvider() bool { return v.DeleteCloudProvider }

// GCPProvidersCloudProvidersCloudProviderConnection includes the requested fields of the GraphQL type CloudProviderConnection.
// The GraphQL type's documentation follows.
//
// A page of CloudProvider results
type GCPProvidersCloudProvidersCloudProviderConnection struct {
	// Total number of cloud providers (in all pages)
	TotalCount int `json:"totalCount"`
	// CloudProviders in the current page, without cursor
	Nodes []GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider `json:"nodes"`
}

// GetTotalCount returns GCPProvidersCloudProvidersCloudProviderConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns GCPProvidersCloudProvidersCloudProviderConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnection) GetNodes() []GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider {
	return v.Nodes
}

// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider includes the requested fields of the GraphQL type CloudProvider.
type GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider struct {
	Id              uuid.UUID                                                                                `json:"id"`
	Name            string                                                                                   `json:"name"`
	Type            CloudProviderType                                                                        `json:"type"`
	Team            GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderTeam                  `json:"team"`
	AuthorizedTeams []GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderAuthorizedTeamsTeam `json:"authorizedTeams"`
	Configuration   GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration         `json:"-"`
}

// GetId returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.Id, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) GetId() uuid.UUID {
	return v.Id
}

// GetName returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.Name, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) GetName() string {
	return v.Name
}

// GetType returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.Type, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) GetType() CloudProviderType {
	return v.Type
}

// GetTeam returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.Team, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) GetTeam() GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderTeam {
	return v.Team
}

// GetAuthorizedTeams returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.AuthorizedTeams, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) GetAuthorizedTeams() []GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderAuthorizedTeamsTeam {
	return v.AuthorizedTeams
}

// GetConfiguration returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.Configuration, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) GetConfiguration() GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration {
	return v.Configuration
}

func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider
		Configuration json.RawMessage `json:"configuration"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Configuration
		src := firstPass.Configuration
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.Configuration: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Type CloudProviderType `json:"type"`

	Team GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderTeam `json:"team"`

	AuthorizedTeams []GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderAuthorizedTeamsTeam `json:"authorizedTeams"`

	Configuration json.RawMessage `json:"configuration"`
}

func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider) __premarshalJSON() (*__premarshalGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider, error) {
	var retval __premarshalGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider

	retval.Id = v.Id
	retval.Name = v.Name
	retval.Type = v.Type
	retval.Team = v.Team
	retval.AuthorizedTeams = v.AuthorizedTeams
	{

		dst := &retval.Configuration
		src := v.Configuration
		var err error
		*dst, err = __marshalGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProvider.Configuration: %w", err)
		}
	}
	return &retval, nil
}

// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderAuthorizedTeamsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users
type GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderAuthorizedTeamsTeam struct {
	// A unique identifier that identifies a specific team.
	Id string `json:"id"`
}

// GetId returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderAuthorizedTeamsTeam.Id, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderAuthorizedTeamsTeam) GetId() string {
	return v.Id
}

// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration includes the requested fields of the GraphQL interface CloudProviderConfiguration.
//
// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration is implemented by the following types:
// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration
// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration
// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration
type GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration interface {
	implementsGraphQLInterfaceGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration) implementsGraphQLInterfaceGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration() {
}
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration) implementsGraphQLInterfaceGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration() {
}
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration) implementsGraphQLInterfaceGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration() {
}

func __unmarshalGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration(b []byte, v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CloudProviderAWSConfiguration":
		*v = new(GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration)
		return json.Unmarshal(b, *v)
	case "CloudProviderAzureConfiguration":
		*v = new(GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration)
		return json.Unmarshal(b, *v)
	case "CloudProviderGCPConfiguration":
		*v = new(GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CloudProviderConfiguration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration: "%v"`, tn.TypeName)
	}
}

func __marshalGCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration(v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration:
		typename = "CloudProviderAWSConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration:
		typename = "CloudProviderAzureConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration:
		typename = "CloudProviderGCPConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfiguration: "%T"`, v)
	}
}

// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration includes the requested fields of the GraphQL type CloudProviderAWSConfiguration.
type GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAWSConfiguration) GetTypename() string {
	return v.Typename
}

// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration includes the requested fields of the GraphQL type CloudProviderAzureConfiguration.
type GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderAzureConfiguration) GetTypename() string {
	return v.Typename
}

// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration includes the requested fields of the GraphQL type CloudProviderGCPConfiguration.
type GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration struct {
	Typename                       string `json:"__typename"`
	ServiceAccountEmail            string `json:"serviceAccountEmail"`
	ProjectNumber                  string `json:"projectNumber"`
	WorkloadIdentityPoolId         string `json:"workloadIdentityPoolId"`
	WorkloadIdentityPoolProviderId string `json:"workloadIdentityPoolProviderId"`
	IssuerUrl                      string `json:"issuerUrl"`
}

// GetTypename returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration) GetTypename() string {
	return v.Typename
}

// GetServiceAccountEmail returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration.ServiceAccountEmail, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration) GetServiceAccountEmail() string {
	return v.ServiceAccountEmail
}

// GetProjectNumber returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration.ProjectNumber, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration) GetProjectNumber() string {
	return v.ProjectNumber
}

// GetWorkloadIdentityPoolId returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration.WorkloadIdentityPoolId, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration) GetWorkloadIdentityPoolId() string {
	return v.WorkloadIdentityPoolId
}

// GetWorkloadIdentityPoolProviderId returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration.WorkloadIdentityPoolProviderId, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration) GetWorkloadIdentityPoolProviderId() string {
	return v.WorkloadIdentityPoolProviderId
}

// GetIssuerUrl returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration.IssuerUrl, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderConfigurationCloudProviderGCPConfiguration) GetIssuerUrl() string {
	return v.IssuerUrl
}

// GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users
type GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderTeam struct {
	// A unique identifier that identifies a specific team.
	Id string `json:"id"`
}

// GetId returns GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderTeam.Id, and is useful for accessing the field via an interface.
func (v *GCPProvidersCloudProvidersCloudProviderConnectionNodesCloudProviderTeam) GetId() string {
	return v.Id
}

// GCPProvidersResponse is returned by GCPProviders on success.
type GCPProvidersResponse struct {
	// Retrieves Cloud Providers.
	// The pagination can be either forward or backward. To enable forward pagination, two arguments
	// are used: `after` and `first`. To enable backward pagination, two arguments are used: `before` and `last`.
	// If arguments for both forward and backward pagination are supplied, forward pagination wil be used. If no arguments
	// are supplied, it returns the first page of 10 cloud providers (i.e. defaults `first` to 10). The result is sorted by
	// the added on date in ascending order.
	// - after: returns the elements in the list that come after the specified cursor. Defaults to empty string, meaning
	// that we return the first page of cloud providers, if `first` value is supplied
	// - first: non-negative integer, denoting the first `n` number of records to return after the `after` cursor value.
	// Max value is 100
	// - before: returns the elements in the list that come before the specified cursor. By default is the empty string,
	// meaning that the results will be the last page, if `last` value is supplied
	// - last: non-negative integer, denoting the last `n` number of records to return before the `before` cursor value.
	// Max value is 100
	CloudProviders GCPProvidersCloudProvidersCloudProviderConnection `json:"cloudProviders"`
}

// GetCloudProviders returns GCPProvidersResponse.CloudProviders, and is useful for accessing the field via an interface.
func (v *GCPProvidersResponse) GetCloudProviders() GCPProvidersCloudProvidersCloudProviderConnection {
	return v.CloudProviders
}

// NewGCPProviderCreateCloudProvider includes the requested fields of the GraphQL type CloudProvider.
type NewGCPProviderCreateCloudProvider struct {
	Id            uuid.UUID                                      `json:"id"`
	Name          string                                         `json:"name"`
	Team          NewGCPProviderCreateCloudProviderTeam          `json:"team"`
	Configuration NewGCPProviderCreateCloudProviderConfiguration `json:"-"`
}

// GetId returns NewGCPProviderCreateCloudProvider.Id, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProvider) GetId() uuid.UUID { return v.Id }

// GetName returns NewGCPProviderCreateCloudProvider.Name, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProvider) GetName() string { return v.Name }

// GetTeam returns NewGCPProviderCreateCloudProvider.Team, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProvider) GetTeam() NewGCPProviderCreateCloudProviderTeam {
	return v.Team
}

// GetConfiguration returns NewGCPProviderCreateCloudProvider.Configuration, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProvider) GetConfiguration() NewGCPProviderCreateCloudProviderConfiguration {
	return v.Configuration
}

func (v *NewGCPProviderCreateCloudProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NewGCPProviderCreateCloudProvider
		Configuration json.RawMessage `json:"configuration"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NewGCPProviderCreateCloudProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Configuration
		src := firstPass.Configuration
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalNewGCPProviderCreateCloudProviderConfiguration(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal NewGCPProviderCreateCloudProvider.Configuration: %w", err)
			}
		}
	}
	return nil
}

type __premarshalNewGCPProviderCreateCloudProvider struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Team NewGCPProviderCreateCloudProviderTeam `json:"team"`

	Configuration json.RawMessage `json:"configuration"`
}

func (v *NewGCPProviderCreateCloudProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NewGCPProviderCreateCloudProvider) __premarshalJSON() (*__premarshalNewGCPProviderCreateCloudProvider, error) {
	var retval __premarshalNewGCPProviderCreateCloudProvider

	retval.Id = v.Id
	retval.Name = v.Name
	retval.Team = v.Team
	{

		dst := &retval.Configuration
		src := v.Configuration
		var err error
		*dst, err = __marshalNewGCPProviderCreateCloudProviderConfiguration(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NewGCPProviderCreateCloudProvider.Configuration: %w", err)
		}
	}
	return &retval, nil
}

// NewGCPProviderCreateCloudProviderConfiguration includes the requested fields of the GraphQL interface CloudProviderConfiguration.
//
// NewGCPProviderCreateCloudProviderConfiguration is implemented by the following types:
// NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration
// NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration
// NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration
type NewGCPProviderCreateCloudProviderConfiguration interface {
	implementsGraphQLInterfaceNewGCPProviderCreateCloudProviderConfiguration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration) implementsGraphQLInterfaceNewGCPProviderCreateCloudProviderConfiguration() {
}
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration) implementsGraphQLInterfaceNewGCPProviderCreateCloudProviderConfiguration() {
}
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration) implementsGraphQLInterfaceNewGCPProviderCreateCloudProviderConfiguration() {
}

func __unmarshalNewGCPProviderCreateCloudProviderConfiguration(b []byte, v *NewGCPProviderCreateCloudProviderConfiguration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CloudProviderAWSConfiguration":
		*v = new(NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration)
		return json.Unmarshal(b, *v)
	case "CloudProviderAzureConfiguration":
		*v = new(NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration)
		return json.Unmarshal(b, *v)
	case "CloudProviderGCPConfiguration":
		*v = new(NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CloudProviderConfiguration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NewGCPProviderCreateCloudProviderConfiguration: "%v"`, tn.TypeName)
	}
}

func __marshalNewGCPProviderCreateCloudProviderConfiguration(v *NewGCPProviderCreateCloudProviderConfiguration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration:
		typename = "CloudProviderAWSConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration:
		typename = "CloudProviderAzureConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration:
		typename = "CloudProviderGCPConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NewGCPProviderCreateCloudProviderConfiguration: "%T"`, v)
	}
}

// NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration includes the requested fields of the GraphQL type CloudProviderAWSConfiguration.
type NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration struct {
	Typename string `json:"__typename"`
}

// GetTypename returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderAWSConfiguration) GetTypename() string {
	return v.Typename
}

// NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration includes the requested fields of the GraphQL type CloudProviderAzureConfiguration.
type NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration struct {
	Typename string `json:"__typename"`
}

// GetTypename returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderAzureConfiguration) GetTypename() string {
	return v.Typename
}

// NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration includes the requested fields of the GraphQL type CloudProviderGCPConfiguration.
type NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration struct {
	Typename                       string `json:"__typename"`
	ServiceAccountEmail            string `json:"serviceAccountEmail"`
	ProjectNumber                  string `json:"projectNumber"`
	WorkloadIdentityPoolId         string `json:"workloadIdentityPoolId"`
	WorkloadIdentityPoolProviderId string `json:"workloadIdentityPoolProviderId"`
	IssuerUrl                      string `json:"issuerUrl"`
}

// GetTypename returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration) GetTypename() string {
	return v.Typename
}

// GetServiceAccountEmail returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration.ServiceAccountEmail, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration) GetServiceAccountEmail() string {
	return v.ServiceAccountEmail
}

// GetProjectNumber returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration.ProjectNumber, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration) GetProjectNumber() string {
	return v.ProjectNumber
}

// GetWorkloadIdentityPoolId returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration.WorkloadIdentityPoolId, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration) GetWorkloadIdentityPoolId() string {
	return v.WorkloadIdentityPoolId
}

// GetWorkloadIdentityPoolProviderId returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration.WorkloadIdentityPoolProviderId, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration) GetWorkloadIdentityPoolProviderId() string {
	return v.WorkloadIdentityPoolProviderId
}

// GetIssuerUrl returns NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration.IssuerUrl, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderConfigurationCloudProviderGCPConfiguration) GetIssuerUrl() string {
	return v.IssuerUrl
}

// NewGCPProviderCreateCloudProviderTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users
type NewGCPProviderCreateCloudProviderTeam struct {
	// A unique identifier that identifies a specific team.
	Id string `json:"id"`
}

// GetId returns NewGCPProviderCreateCloudProviderTeam.Id, and is useful for accessing the field via an interface.
func (v *NewGCPProviderCreateCloudProviderTeam) GetId() string { return v.Id }

// NewGCPProviderResponse is returned by NewGCPProvider on success.
type NewGCPProviderResponse struct {
	// Creates a Cloud Provider
	CreateCloudProvider NewGCPProviderCreateCloudProvider `json:"createCloudProvider"`
}

// GetCreateCloudProvider returns NewGCPProviderResponse.CreateCloudProvider, and is useful for accessing the field via an interface.
func (v *NewGCPProviderResponse) GetCreateCloudProvider() NewGCPProviderCreateCloudProvider {
	return v.CreateCloudProvider
}

// UpdateGCPProviderResponse is returned by UpdateGCPProvider on success.
type UpdateGCPProviderResponse struct {
	// Updates a cloud provider
	UpdateCloudProvider UpdateGCPProviderUpdateCloudProvider `json:"updateCloudProvider"`
}

// GetUpdateCloudProvider returns UpdateGCPProviderResponse.UpdateCloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderResponse) GetUpdateCloudProvider() UpdateGCPProviderUpdateCloudProvider {
	return v.UpdateCloudProvider
}

// UpdateGCPProviderUpdateCloudProvider includes the requested fields of the GraphQL type CloudProvider.
type UpdateGCPProviderUpdateCloudProvider struct {
	Id            uuid.UUID                                         `json:"id"`
	Name          string                                            `json:"name"`
	Team          UpdateGCPProviderUpdateCloudProviderTeam          `json:"team"`
	Configuration UpdateGCPProviderUpdateCloudProviderConfiguration `json:"-"`
}

// GetId returns UpdateGCPProviderUpdateCloudProvider.Id, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProvider) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateGCPProviderUpdateCloudProvider.Name, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProvider) GetName() string { return v.Name }

// GetTeam returns UpdateGCPProviderUpdateCloudProvider.Team, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProvider) GetTeam() UpdateGCPProviderUpdateCloudProviderTeam {
	return v.Team
}

// GetConfiguration returns UpdateGCPProviderUpdateCloudProvider.Configuration, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProvider) GetConfiguration() UpdateGCPProviderUpdateCloudProviderConfiguration {
	return v.Configuration
}

func (v *UpdateGCPProviderUpdateCloudProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateGCPProviderUpdateCloudProvider
		Configuration json.RawMessage `json:"configuration"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateGCPProviderUpdateCloudProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Configuration
		src := firstPass.Configuration
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateGCPProviderUpdateCloudProviderConfiguration(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateGCPProviderUpdateCloudProvider.Configuration: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateGCPProviderUpdateCloudProvider struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Team UpdateGCPProviderUpdateCloudProviderTeam `json:"team"`

	Configuration json.RawMessage `json:"configuration"`
}

func (v *UpdateGCPProviderUpdateCloudProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateGCPProviderUpdateCloudProvider) __premarshalJSON() (*__premarshalUpdateGCPProviderUpdateCloudProvider, error) {
	var retval __premarshalUpdateGCPProviderUpdateCloudProvider

	retval.Id = v.Id
	retval.Name = v.Name
	retval.Team = v.Team
	{

		dst := &retval.Configuration
		src := v.Configuration
		var err error
		*dst, err = __marshalUpdateGCPProviderUpdateCloudProviderConfiguration(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateGCPProviderUpdateCloudProvider.Configuration: %w", err)
		}
	}
	return &retval, nil
}

// UpdateGCPProviderUpdateCloudProviderConfiguration includes the requested fields of the GraphQL interface CloudProviderConfiguration.
//
// UpdateGCPProviderUpdateCloudProviderConfiguration is implemented by the following types:
// UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration
// UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration
// UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration
type UpdateGCPProviderUpdateCloudProviderConfiguration interface {
	implementsGraphQLInterfaceUpdateGCPProviderUpdateCloudProviderConfiguration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration) implementsGraphQLInterfaceUpdateGCPProviderUpdateCloudProviderConfiguration() {
}
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration) implementsGraphQLInterfaceUpdateGCPProviderUpdateCloudProviderConfiguration() {
}
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration) implementsGraphQLInterfaceUpdateGCPProviderUpdateCloudProviderConfiguration() {
}

func __unmarshalUpdateGCPProviderUpdateCloudProviderConfiguration(b []byte, v *UpdateGCPProviderUpdateCloudProviderConfiguration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CloudProviderAWSConfiguration":
		*v = new(UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration)
		return json.Unmarshal(b, *v)
	case "CloudProviderAzureConfiguration":
		*v = new(UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration)
		return json.Unmarshal(b, *v)
	case "CloudProviderGCPConfiguration":
		*v = new(UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CloudProviderConfiguration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateGCPProviderUpdateCloudProviderConfiguration: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateGCPProviderUpdateCloudProviderConfiguration(v *UpdateGCPProviderUpdateCloudProviderConfiguration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration:
		typename = "CloudProviderAWSConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration:
		typename = "CloudProviderAzureConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration:
		typename = "CloudProviderGCPConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateGCPProviderUpdateCloudProviderConfiguration: "%T"`, v)
	}
}

// UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration includes the requested fields of the GraphQL type CloudProviderAWSConfiguration.
type UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration struct {
	Typename string `json:"__typename"`
}

// GetTypename returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAWSConfiguration) GetTypename() string {
	return v.Typename
}

// UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration includes the requested fields of the GraphQL type CloudProviderAzureConfiguration.
type UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration struct {
	Typename string `json:"__typename"`
}

// GetTypename returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderAzureConfiguration) GetTypename() string {
	return v.Typename
}

// UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration includes the requested fields of the GraphQL type CloudProviderGCPConfiguration.
type UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration struct {
	Typename                       string `json:"__typename"`
	ServiceAccountEmail            string `json:"serviceAccountEmail"`
	ProjectNumber                  string `json:"projectNumber"`
	WorkloadIdentityPoolId         string `json:"workloadIdentityPoolId"`
	WorkloadIdentityPoolProviderId string `json:"workloadIdentityPoolProviderId"`
	IssuerUrl                      string `json:"issuerUrl"`
}

// GetTypename returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration) GetTypename() string {
	return v.Typename
}

// GetServiceAccountEmail returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration.ServiceAccountEmail, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration) GetServiceAccountEmail() string {
	return v.ServiceAccountEmail
}

// GetProjectNumber returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration.ProjectNumber, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration) GetProjectNumber() string {
	return v.ProjectNumber
}

// GetWorkloadIdentityPoolId returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration.WorkloadIdentityPoolId, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration) GetWorkloadIdentityPoolId() string {
	return v.WorkloadIdentityPoolId
}

// GetWorkloadIdentityPoolProviderId returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration.WorkloadIdentityPoolProviderId, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration) GetWorkloadIdentityPoolProviderId() string {
	return v.WorkloadIdentityPoolProviderId
}

// GetIssuerUrl returns UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration.IssuerUrl, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderConfigurationCloudProviderGCPConfiguration) GetIssuerUrl() string {
	return v.IssuerUrl
}

// UpdateGCPProviderUpdateCloudProviderTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users
type UpdateGCPProviderUpdateCloudProviderTeam struct {
	// A unique identifier that identifies a specific team.
	Id string `json:"id"`
}

// GetId returns UpdateGCPProviderUpdateCloudProviderTeam.Id, and is useful for accessing the field via an interface.
func (v *UpdateGCPProviderUpdateCloudProviderTeam) GetId() string { return v.Id }

// __DeleteGCPProviderInput is used internally by genqlient
type __DeleteGCPProviderInput struct {
	Id uuid.UUID `json:"Id"`
}

// GetId returns __DeleteGCPProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteGCPProviderInput) GetId() uuid.UUID { return v.Id }

// __NewGCPProviderInput is used internally by genqlient
type __NewGCPProviderInput struct {
	Name    string    `json:"Name"`
	Team    uuid.UUID `json:"Team"`
	Email   string    `json:"Email"`
	Project string    `json:"Project"`
	WIPId   string    `json:"WIPId"`
	WIPPId  string    `json:"WIPPId"`
}

// GetName returns __NewGCPProviderInput.Name, and is useful for accessing the field via an interface.
func (v *__NewGCPProviderInput) GetName() string { return v.Name }

// GetTeam returns __NewGCPProviderInput.Team, and is useful for accessing the field via an interface.
func (v *__NewGCPProviderInput) GetTeam() uuid.UUID { return v.Team }

// GetEmail returns __NewGCPProviderInput.Email, and is useful for accessing the field via an interface.
func (v *__NewGCPProviderInput) GetEmail() string { return v.Email }

// GetProject returns __NewGCPProviderInput.Project, and is useful for accessing the field via an interface.
func (v *__NewGCPProviderInput) GetProject() string { return v.Project }

// GetWIPId returns __NewGCPProviderInput.WIPId, and is useful for accessing the field via an interface.
func (v *__NewGCPProviderInput) GetWIPId() string { return v.WIPId }

// GetWIPPId returns __NewGCPProviderInput.WIPPId, and is useful for accessing the field via an interface.
func (v *__NewGCPProviderInput) GetWIPPId() string { return v.WIPPId }

// __UpdateGCPProviderInput is used internally by genqlient
type __UpdateGCPProviderInput struct {
	Id      uuid.UUID `json:"Id"`
	Name    string    `json:"Name"`
	Team    uuid.UUID `json:"Team"`
	Project string    `json:"Project"`
	WIPId   string    `json:"WIPId"`
	WIPPId  string    `json:"WIPPId"`
}

// GetId returns __UpdateGCPProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateGCPProviderInput) GetId() uuid.UUID { return v.Id }

// GetName returns __UpdateGCPProviderInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateGCPProviderInput) GetName() string { return v.Name }

// GetTeam returns __UpdateGCPProviderInput.Team, and is useful for accessing the field via an interface.
func (v *__UpdateGCPProviderInput) GetTeam() uuid.UUID { return v.Team }

// GetProject returns __UpdateGCPProviderInput.Project, and is useful for accessing the field via an interface.
func (v *__UpdateGCPProviderInput) GetProject() string { return v.Project }

// GetWIPId returns __UpdateGCPProviderInput.WIPId, and is useful for accessing the field via an interface.
func (v *__UpdateGCPProviderInput) GetWIPId() string { return v.WIPId }

// GetWIPPId returns __UpdateGCPProviderInput.WIPPId, and is useful for accessing the field via an interface.
func (v *__UpdateGCPProviderInput) GetWIPPId() string { return v.WIPPId }

// The mutation executed by DeleteGCPProvider.
const DeleteGCPProvider_Operation = `
mutation DeleteGCPProvider ($Id: UUID!) {
	deleteCloudProvider(cloudProviderId: [$Id])
}
`

func DeleteGCPProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	Id uuid.UUID,
) (data_ *DeleteGCPProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteGCPProvider",
		Query:  DeleteGCPProvider_Operation,
		Variables: &__DeleteGCPProviderInput{
			Id: Id,
		},
	}

	data_ = &DeleteGCPProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GCPProviders.
const GCPProviders_Operation = `
query GCPProviders {
	cloudProviders(filter: {type:GCP}) {
		totalCount
		nodes {
			id
			name
			type
			team {
				id
			}
			authorizedTeams {
				id
			}
			configuration {
				__typename
				... on CloudProviderGCPConfiguration {
					serviceAccountEmail
					projectNumber
					workloadIdentityPoolId
					workloadIdentityPoolProviderId
					issuerUrl
				}
			}
		}
	}
}
`

func GCPProviders(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GCPProvidersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GCPProviders",
		Query:  GCPProviders_Operation,
	}

	data_ = &GCPProvidersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by NewGCPProvider.
const NewGCPProvider_Operation = `
mutation NewGCPProvider ($Name: String!, $Team: UUID!, $Email: String!, $Project: String!, $WIPId: String!, $WIPPId: String!) {
	createCloudProvider(input: {name:$Name,type:GCP,teamId:$Team,gcpConfiguration:{authorizationMethod:WORKLOAD_IDENTITY_FEDERATION,serviceAccountEmail:$Email,projectNumber:$Project,workloadIdentityPoolId:$WIPId,workloadIdentityPoolProviderId:$WIPPId}}) {
		id
		name
		team {
			id
		}
		configuration {
			__typename
			... on CloudProviderGCPConfiguration {
				serviceAccountEmail
				projectNumber
				workloadIdentityPoolId
				workloadIdentityPoolProviderId
				issuerUrl
			}
		}
	}
}
`

func NewGCPProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	Name string,
	Team uuid.UUID,
	Email string,
	Project string,
	WIPId string,
	WIPPId string,
) (data_ *NewGCPProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "NewGCPProvider",
		Query:  NewGCPProvider_Operation,
		Variables: &__NewGCPProviderInput{
			Name:    Name,
			Team:    Team,
			Email:   Email,
			Project: Project,
			WIPId:   WIPId,
			WIPPId:  WIPPId,
		},
	}

	data_ = &NewGCPProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateGCPProvider.
const UpdateGCPProvider_Operation = `
mutation UpdateGCPProvider ($Id: UUID!, $Name: String!, $Team: UUID!, $Project: String!, $WIPId: String!, $WIPPId: String!) {
	updateCloudProvider(input: {id:$Id,name:$Name,type:GCP,teamId:$Team,gcpConfiguration:{projectNumber:$Project,workloadIdentityPoolId:$WIPId,workloadIdentityPoolProviderId:$WIPPId}}) {
		id
		name
		team {
			id
		}
		configuration {
			__typename
			... on CloudProviderGCPConfiguration {
				serviceAccountEmail
				projectNumber
				workloadIdentityPoolId
				workloadIdentityPoolProviderId
				issuerUrl
			}
		}
	}
}
`

func UpdateGCPProvider(
	ctx_ context.Context,
	client_ graphql.Client,
	Id uuid.UUID,
	Name string,
	Team uuid.UUID,
	Project string,
	WIPId string,
	WIPPId string,
) (data_ *UpdateGCPProviderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateGCPProvider",
		Query:  UpdateGCPProvider_Operation,
		Variables: &__UpdateGCPProviderInput{
			Id:      Id,
			Name:    Name,
			Team:    Team,
			Project: Project,
			WIPId:   WIPId,
			WIPPId:  WIPPId,
		},
	}

	data_ = &UpdateGCPProviderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
